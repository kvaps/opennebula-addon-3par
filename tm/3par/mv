#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
# Copyright 2021, WEDOS Internet a.s. (wedos.com)                            #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to move images/directories across system_ds in different hosts. When used for the system datastore the script will received the directory 
###############################################################################

# MV <hostA:system_ds/disk.i|hostB:system_ds/disk.i> vmid dsid
#    <hostA:system_ds/|hostB:system_ds/>
#   - hostX is the target host to deploy the VM
#   - system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get mv and datastore arguments from OpenNebula core ------------

SRC=$1
DST=$2

VMID=$3
DSID=$4 # image ds

SRC=`fix_dir_slashes $SRC`
DST=`fix_dir_slashes $DST`

SRC_PATH=`arg_path $SRC`
DST_PATH=`arg_path $DST`

SRC_HOST=`arg_host $SRC`
DST_HOST=`arg_host $DST`

DST_DIR=`dirname $DST_PATH`

SRC_DS_DIR=`dirname  $SRC_PATH`
SRC_VM_DIR=`basename $SRC_PATH`

if [ "$SRC" = "$DST" ]; then
    log "Not moving $SRC to $DST, they are the same path"
    exit 0
fi

LCM_STATE=`lcm_state`

#-------------------------------------------------------------------------------
# Get image information
#-------------------------------------------------------------------------------

if [ `is_disk $SRC_PATH` -eq 0 ]; then
    SRC_DSID=$(echo $SRC_PATH | $AWK -F '/' '{print $(NF-1)}')
    DST_DSID=$(echo $DST_PATH | $AWK -F '/' '{print $(NF-1)}')
else
    SRC_DSID=$(echo $SRC_PATH | $AWK -F '/' '{print $(NF-2)}')
    DST_DSID=$(echo $DST_PATH | $AWK -F '/' '{print $(NF-2)}')
    DISK_ID=$(echo "$SRC_PATH" | $AWK -F. '{print $NF}')
    
    XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
    
    unset i j XPATH_ELEMENTS
    
    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(onevm show -x $VMID| $XPATH \
                        /VM/NAME \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SIZE \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT)
    
    VM_NAME="${XPATH_ELEMENTS[j++]//[^A-Za-z0-9\[\]() _~+-]/}"
    SRC_NAME_WWN="${XPATH_ELEMENTS[j++]}"
    IMAGE_ID="${XPATH_ELEMENTS[j++]}"
    SIZE="${XPATH_ELEMENTS[j++]}"
    CLONE="${XPATH_ELEMENTS[j++]}"
    PERSISTENT="${XPATH_ELEMENTS[j++]}"
    
    # Disk os clone or volatile, so copy was created
    if [ "$CLONE" = "YES" ] || [ -z "$SRC_NAME_WWN" ]; then
        VOLATILE=YES
    else
        SRC_DSID=$DSID
        DST_DSID=$DSID
    fi
fi

#-------------------------------------------------------------------------------
# Get source ds information
#-------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SRC_DSID | $XPATH \
                    /DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DATASTORE/TEMPLATE/IP \
                    /DATASTORE/TEMPLATE/CPG \
                    /DATASTORE/TEMPLATE/THIN \
                    /DATASTORE/TEMPLATE/DEDUP \
                    /DATASTORE/TEMPLATE/COMPRESSION \
                    /DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DATASTORE/TEMPLATE/PORTALS \
                    /DATASTORE/TEMPLATE/PORTALS_NUM \
                    /DATASTORE/TEMPLATE/QOS_ENABLE \
                    /DATASTORE/TEMPLATE/QOS_PRIORITY \
                    /DATASTORE/TEMPLATE/QOS_MAX_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MIN_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MAX_BW \
                    /DATASTORE/TEMPLATE/QOS_MIN_BW \
                    /DATASTORE/TEMPLATE/QOS_LATENCY)

SRC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
SRC_IP="${XPATH_ELEMENTS[j++]:-$IP}"
SRC_CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
SRC_THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
SRC_DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
SRC_COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
SRC_NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
SRC_PORTALS="${XPATH_ELEMENTS[j++]:-$PORTALS}"
SRC_PORTALS_NUM="${XPATH_ELEMENTS[j++]:-$PORTALS_NUM}"
SRC_QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"
SRC_QOS_PRIORITY="${XPATH_ELEMENTS[j++]:-$QOS_PRIORITY}"
SRC_QOS_MAX_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MAX_IOPS}"
SRC_QOS_MIN_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MIN_IOPS}"
SRC_QOS_MAX_BW="${XPATH_ELEMENTS[j++]:-$QOS_MAX_BW}"
SRC_QOS_MIN_BW="${XPATH_ELEMENTS[j++]:-$QOS_MIN_BW}"
SRC_QOS_LATENCY="${XPATH_ELEMENTS[j++]:-$QOS_LATENCY}"

if [ -z "$SRC_PORTALS" ]; then
    SRC_PORTALS=$(${DRIVER_PATH}/../../datastore/3par/3par.py getIscsiPortals -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD ${SRC_PORTALS_NUM:+--sort YES})
    if [ $? -ne 0 ]; then
        error_message "$SRC_PORTALS"
        exit 1
    fi
fi

#-------------------------------------------------------------------------------
# Get addtitional image information
#-------------------------------------------------------------------------------

if [ `is_disk $SRC_PATH` -eq 1 ]; then
    if [ "$CLONE" = "YES" ] || [ -z "$SRC_NAME_WWN" ]; then
        # get VM disk WWN
        SRC_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py getVmClone -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME \
                                                                      -p $PASSWORD -nt $SRC_NAMING_TYPE -vi $VMID -id $DISK_ID)
    
        if [ $? -ne 0 ]; then
          error_message "$SRC_NAME_WWN"
          exit 1
        fi
    fi
    
    SRC_NAME=$(get_vv_name "$SRC_NAME_WWN")
    SRC_WWN=$(get_vv_wwn "$SRC_NAME_WWN")
fi

#-------------------------------------------------------------------------------
# Get destination ds information
#-------------------------------------------------------------------------------

if [ "$DST_DSID" = "$SRC_DSID" ]; then
    SAME_3PAR=1
    DST_API_ENDPOINT="$SRC_API_ENDPOINT"
    DST_IP="$SRC_IP"
    DST_CPG="$SRC_CPG"
    DST_THIN="$SRC_THIN"
    DST_DEDUP="$SRC_DEDUP"
    DST_COMPRESSION="$SRC_COMPRESSION"
    DST_NAMING_TYPE="$SRC_NAMING_TYPE"
    DST_PORTALS="$SRC_PORTALS"
    DST_PORTALS_NUM="$SRC_PORTALS_NUM"
else
    XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
    
    unset i j XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(onedatastore show -x $DST_DSID | $XPATH \
                        /DATASTORE/TEMPLATE/API_ENDPOINT \
                        /DATASTORE/TEMPLATE/IP \
                        /DATASTORE/TEMPLATE/CPG \
                        /DATASTORE/TEMPLATE/THIN \
                        /DATASTORE/TEMPLATE/DEDUP \
                        /DATASTORE/TEMPLATE/COMPRESSION \
                        /DATASTORE/TEMPLATE/NAMING_TYPE \
                        /DATASTORE/TEMPLATE/PORTALS \
                        /DATASTORE/TEMPLATE/PORTALS_NUM \
                        /DATASTORE/TEMPLATE/QOS_ENABLE \
                        /DATASTORE/TEMPLATE/QOS_PRIORITY \
                        /DATASTORE/TEMPLATE/QOS_MAX_IOPS \
                        /DATASTORE/TEMPLATE/QOS_MIN_IOPS \
                        /DATASTORE/TEMPLATE/QOS_MAX_BW \
                        /DATASTORE/TEMPLATE/QOS_MIN_BW \
                        /DATASTORE/TEMPLATE/QOS_LATENCY)
    
    DST_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
    DST_IP="${XPATH_ELEMENTS[j++]:-$IP}"
    DST_CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
    DST_THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
    DST_DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
    DST_COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
    DST_NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
    DST_PORTALS="${XPATH_ELEMENTS[j++]:-$PORTALS}"
    DST_PORTALS_NUM="${XPATH_ELEMENTS[j++]:-$PORTALS_NUM}"
    DST_QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"
    DST_QOS_PRIORITY="${XPATH_ELEMENTS[j++]:-$QOS_PRIORITY}"
    DST_QOS_MAX_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MAX_IOPS}"
    DST_QOS_MIN_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MIN_IOPS}"
    DST_QOS_MAX_BW="${XPATH_ELEMENTS[j++]:-$QOS_MAX_BW}"
    DST_QOS_MIN_BW="${XPATH_ELEMENTS[j++]:-$QOS_MIN_BW}"
    DST_QOS_LATENCY="${XPATH_ELEMENTS[j++]:-$QOS_LATENCY}"
fi

#-------------------------------------------------------------------------------
# Start actions for directory transfer
#-------------------------------------------------------------------------------

if [ `is_disk $DST_PATH` -eq 0 ]; then
    # VM is in unknown state, SRC_HOST probably in failed state
    if [[ "$LCM_STATE" =~ ^(60|61)$ ]]; then
      log "Not moving files from $SRC_HOST in FT mode"
      exit 0
    fi

    # get VM checkpoint WWN, if any
    SRC_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py getVmClone -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME \
                                                                  -p $PASSWORD -nt $SRC_NAMING_TYPE -vi $VMID -id cp)

    if [ $? -ne 0 ]; then
        # for SUSPENDED it must exist otherwise exit with no error
        if [[ "$LCM_STATE" =~ ^(45|46)$ ]]; then
            error_message "$SRC_NAME_WWN"
        fi
    else
        SRC_NAME=$(get_vv_name "$SRC_NAME_WWN")
        SRC_WWN=$(get_vv_wwn "$SRC_NAME_WWN")
    fi

    # Transfer checkpoint across system ds (if any)
    if [ -n "$SRC_NAME" ]; then

        if [ -z "$SAME_3PAR" ]; then
            ${DRIVER_PATH}/../../datastore/3par/3par.py getVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                                                            -p $PASSWORD -n $SRC_NAME >/dev/null
            if [ $? -ne 0 ]; then
                SAME_3PAR=0
            else
                SAME_3PAR=1
                DST_PORTALS="$SRC_PORTALS"
            fi
        fi

        DST_NAME_WWN="$SRC_NAME_WWN"
        DST_NAME="$SRC_NAME"
        DST_WWN="$SRC_WWN"
    
        if [ "$SAME_3PAR" = 1 ]; then
            # If different naming type within same 3par, rename image
            if [ "$SRC_NAMING_TYPE" != "$DST_NAMING_TYPE" ]; then
                DST_NAME=$(${DRIVER_PATH}/../../datastore/3par/3par.py mvVmClone -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                        -snt $SRC_NAMING_TYPE -nt $DST_NAMING_TYPE -vi $VMID  -id $DISK_ID)
                if [ $? -ne 0 ]; then
                    error_message "$DST_NAME"
                    exit 1
                fi
            fi
        else
            # -------- Create image in case of multiple 3pars ------------
            SIZE=$(${DRIVER_PATH}/../../datastore/3par/3par.py getVVSize -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME \
                                                                            -p $PASSWORD -n $SRC_NAME -t VSIZE)
            if [ $? -ne 0 ]; then
                error_message "$SIZE"
                exit 1
            fi

            DST_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py createVmVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                            -p $PASSWORD -nt $DST_NAMING_TYPE -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION \
                                            -vi $VMID -id cp -c $DST_CPG -sz $SIZE -co "$VM_NAME")

            if [ $? -ne 0 ]; then
              error_message "$DST_NAME_WWN"
              exit 1
            fi
    
            DST_NAME=$(get_vv_name "$DST_NAME_WWN")
            DST_WWN=$(get_vv_wwn "$DST_NAME_WWN")
    
            log "Add disk to VM VV Set"
            VVSET=$(${DRIVER_PATH}/../../datastore/3par/3par.py addVolumeToVVSet -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -co "$VM_NAME")
            
            if [ $? -ne 0 ]; then
                error_message "$VVSET"
                exit 1
            fi
            
            if [ "$QOS_ENABLE" == "YES" ]; then
                log "Create QoS Policy"
                QOS=$(${DRIVER_PATH}/../../datastore/3par/3par.py createQosPolicy -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                    -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -qp $QOS_PRIORITY -qxi $DST_QOS_MAX_IOPS -qmi $DST_QOS_MIN_IOPS \
                                    -qxb $DST_QOS_MAX_BW -qmb $DST_QOS_MIN_BW -ql $DST_QOS_LATENCY)
            
                if [ $? -ne 0 ]; then
                    error_message "$QOS"
                    exit 1
                fi
            fi
        fi

        # ------- Activate checkpoint on DST (skip for EPILOG_STOP + EPILOG_UNDEPLOY) -----------
        if ! [[ "$LCM_STATE" =~ ^(10|30|41|42)$ ]]; then

            DST_HOST_ISCSI_NAME=$($SSH $DST_HOST sudo cat /etc/iscsi/initiatorname.iscsi | awk -F= '{print $2}')
            DST_HOST_3PAR=$(${DRIVER_PATH}/../../datastore/3par/3par.py setupHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                -hs $DST_HOST -in $DST_HOST_ISCSI_NAME)
            if [ $? -ne 0 ]; then
                error_message "$DST_HOST_3PAR"
                exit 1
            fi
    
            ssh_exec_and_log "$DST_HOST" "$(iscsi_login "$DST_PORTALS" "$DST_PORTALS_NUM")"

            LUN=$(${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                                        -n $DST_NAME -hs $DST_HOST)
            if [ $? -ne 0 ]; then
                error_message "$LUN"
                exit 1
            fi

            DISCOVER_CMD=$(cat <<EOF
                set -e
                mkdir -p "$DST_DIR"
                $(discover_lun "$LUN" "$DST_WWN")
                mkdir -p "$DST_PATH"
                ln -sf "\$DEV" "$DST_PATH/checkpoint"
EOF
)
            
            ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
                "Error registering $DST_NAME_WWN to $DST_HOST"
        fi


        # ------- Perform transfer checkpoint in case of different datastores -----------
        
        # Transfer checkpoint across system ds (only for different system datastores)
        if [ "$DST_DSID" != "$SRC_DSID" ] && [ "$SAME_3PAR" = 0 ]; then
            COPY_CMD=$(cat <<EOF
                set -e -o pipefail
                dd \if=/dev/disk/by-id/wwn-0x$SRC_WWN bs=${DD_BLOCK_SIZE:-64k} | $SSH $DST_HOST 'dd of=/dev/disk/by-id/wwn-0x$DST_WWN bs=${DD_BLOCK_SIZE:-64k} conv=${DD_CONV:-sparse}'
                sync
EOF
)
        
            ssh_forward ssh_exec_and_log "$SRC_HOST" "$COPY_CMD" \
                "Error copying $SRC_WWN to $DST_WWN in $SRC_HOST"
        fi
        
        # ------- Deactivate checkpoint on SRC (skip for PROLOG_RESUME + PROLOG_UNDEPLOY and same host) -----------
        if ! [[ "$LCM_STATE" =~ ^(9|31|49|50)$ ]] && [ "$SRC_HOST" != "$DST_HOST" ]; then
            LUN=$(${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
              -n $SRC_NAME -hs $SRC_HOST)

            if [ $? -ne 0 ]; then
              error_message "$LUN"
              exit 1
            fi

            FLUSH_CMD=$(cat <<EOF
              set -e
              $(remove_lun "$SRC_WWN")
EOF
)

            ssh_exec_and_log "$SRC_HOST" "$FLUSH_CMD" \
                "Error flushing out mapping"

            ${DRIVER_PATH}/../../datastore/3par/3par.py deleteHost -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                -hs $SRC_HOST >/dev/null
        
            if [ $? -eq 0 ]; then
                ssh_exec_and_log "$SRC_HOST" "$(iscsi_logout "$SRC_PORTALS")"
            fi
        fi
    fi

    # for EPILOG_STOP + EPILOG_UNDEPLOY, delete source path and exit
    if [[ "$LCM_STATE" =~ ^(10|30|41|42)$ ]]; then
        ssh_exec_and_log "$SRC_HOST" "rm -rf '$SRC_PATH'" \
            "Error removing target path to prevent overwrite errors"
        exit 0
    fi

    ssh_make_path "$DST_HOST" "$DST_DIR"

    # for PROLOG_RESUME + PROLOG_UNDEPLOY, we have nothing to do
    if [[ "$LCM_STATE" =~ ^(9|31|49|50)$ ]]; then
        exit 0
    fi

    log "Moving $SRC to $DST"

    TAR_SSH=$(cat <<EOF
    set -e -o pipefail
    
    $TAR -C $SRC_DS_DIR --sparse -cf - $SRC_VM_DIR | $SSH $DST_HOST '$TAR -C $DST_DIR --skip-old-files --sparse -xf -'
    rm -rf $SRC_PATH
EOF
)

    ssh_forward ssh_exec_and_log "$SRC_HOST" "$TAR_SSH" "Error copying disk directory to target host"

    # Delete disk from old system ds (only for different system datastores)
    if [ -n "$SRC_NAME" ] && [ "$DST_DSID" != "$SRC_DSID" ] && [ "$SAME_3PAR" = 0 ]; then
        log "Remove checkpoint from VM VV Set"
        VVSET=$(${DRIVER_PATH}/../../datastore/3par/3par.py deleteVolumeFromVVSet -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                            -nt $SRC_NAMING_TYPE -n $SRC_NAME -vi $VMID)
        
        if [ $? -ne 0 ]; then
            error_message "$VVSET"
            exit 1
        fi
    
        VV=$(${DRIVER_PATH}/../../datastore/3par/3par.py deleteVmClone -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                            -nt $SRC_NAMING_TYPE -vi $VMID -id cp)
        if [ $? -ne 0 ]; then
            error_message "$VV"
            exit 1
        fi
    fi

    DISK_IDS=$(onevm show $VMID -x | ${DRIVER_PATH}/../../datastore/xpath.rb --stdin '%m%/VM/TEMPLATE/DISK/DISK_ID')
    for k in $DISK_IDS; do
        $0 "$1/disk.$k" "$2/disk.$k" "$3" "$4"
    done

    exit 0
fi

#-------------------------------------------------------------------------------
# Start actions for disk transfer
#-------------------------------------------------------------------------------

if [ -z "$SAME_3PAR" ]; then
    ${DRIVER_PATH}/../../datastore/3par/3par.py getVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                                                    -p $PASSWORD -n $SRC_NAME >/dev/null
    if [ $? -ne 0 ]; then
        SAME_3PAR=0
    else
        SAME_3PAR=1
        DST_PORTALS="$SRC_PORTALS"
    fi
fi

if [ -z "$DST_PORTALS" ]; then
    DST_PORTALS=$(${DRIVER_PATH}/../../datastore/3par/3par.py getIscsiPortals -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD ${DST_PORTALS_NUM:+--sort YES})
    if [ $? -ne 0 ]; then
        error_message "$DST_PORTALS"
        exit 1
    fi
fi

DST_NAME_WWN="$SRC_NAME_WWN"
DST_NAME="$SRC_NAME"
DST_WWN="$SRC_WWN"

# Transfer system ds (only for non-persistent images)
if [ "$CLONE" = "YES" ] || [ "$VOLATILE" = "YES" ]; then
    if [ "$SAME_3PAR" = 1 ]; then
        # If different naming type within same 3par, rename image
        if [ "$SRC_NAMING_TYPE" != "$DST_NAMING_TYPE" ]; then
            DST_NAME=$(${DRIVER_PATH}/../../datastore/3par/3par.py mvVmClone -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                    -snt $SRC_NAMING_TYPE -nt $DST_NAMING_TYPE -vi $VMID  -id $DISK_ID)
            if [ $? -ne 0 ]; then
                error_message "$DST_NAME"
                exit 1
            fi
        fi
    else
        # -------- Create image in case of multiple 3pars ------------
        DST_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py createVmVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                        -p $PASSWORD -nt $DST_NAMING_TYPE -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION \
                                        -vi $VMID -id $DISK_ID -c $DST_CPG -sz $SIZE -co "$VM_NAME")

        if [ $? -ne 0 ]; then
          error_message "$DST_NAME_WWN"
          exit 1
        fi

        DST_NAME=$(get_vv_name "$DST_NAME_WWN")
        DST_WWN=$(get_vv_wwn "$DST_NAME_WWN")

        log "Add disk to VM VV Set"
        VVSET=$(${DRIVER_PATH}/../../datastore/3par/3par.py addVolumeToVVSet -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                            -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -co "$VM_NAME")
        
        if [ $? -ne 0 ]; then
          error_message "$VVSET"
          exit 1
        fi
        
        if [ "$QOS_ENABLE" == "YES" ]; then
            log "Create QoS Policy"
            QOS=$(${DRIVER_PATH}/../../datastore/3par/3par.py createQosPolicy -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -qp $QOS_PRIORITY -qxi $DST_QOS_MAX_IOPS -qmi $DST_QOS_MIN_IOPS \
                                -qxb $DST_QOS_MAX_BW -qmb $DST_QOS_MIN_BW -ql $DST_QOS_LATENCY)
        
            if [ $? -ne 0 ]; then
                error_message "$QOS"
                exit 1
            fi
        fi
    fi
fi

# ------- Activate disk on DST (skip for EPILOG_STOP + EPILOG_UNDEPLOY) -----------

if ! [[ "$LCM_STATE" =~ ^(10|30|41|42)$ ]]; then
    DST_HOST_ISCSI_NAME=$($SSH $DST_HOST sudo cat /etc/iscsi/initiatorname.iscsi | awk -F= '{print $2}')
    DST_HOST_3PAR=$(${DRIVER_PATH}/../../datastore/3par/3par.py setupHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
        -hs $DST_HOST -in $DST_HOST_ISCSI_NAME)
    if [ $? -ne 0 ]; then
        error_message "$DST_HOST_3PAR"
        exit 1
    fi
    
    ssh_exec_and_log "$DST_HOST" "$(iscsi_login "$DST_PORTALS" "$DST_PORTALS_NUM")"
    
    log "Mapping $DST_NAME_WWN to $DST_HOST"
    
    DST_LUN=$(${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                                -n $DST_NAME -hs $DST_HOST)
    
    if [ $? -ne 0 ]; then
        error_message "$DST_LUN"
        exit 1
    fi
    
    DISCOVER_CMD=$(cat <<EOF
        set -e
        mkdir -p "$DST_DIR"
        $(discover_lun "$DST_LUN" "$DST_WWN")
        ln -sf "\$DEV" "$DST_PATH"
EOF
)
    
    ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
        "Error registering $DST_NAME_WWN to $DST_HOST"
fi

# ------- Perform transfer in case of different datastores -----------

# Transfer system ds (only for non-persistent images)
if [ "$CLONE" = "YES" ] || [ "$VOLATILE" = "YES" ]; then
    # Only for different system datastores
    if [ "$DST_DSID" != "$SRC_DSID" ] && [ "$SAME_3PAR" = 0 ]; then
        COPY_CMD=$(cat <<EOF
            set -e -o pipefail
            dd \if=/dev/disk/by-id/wwn-0x$SRC_WWN bs=${DD_BLOCK_SIZE:-64k} | $SSH $DST_HOST 'dd of=/dev/disk/by-id/wwn-0x$DST_WWN bs=${DD_BLOCK_SIZE:-64k} conv=${DD_CONV:-sparse}'
            sync
EOF
)
    
        ssh_forward ssh_exec_and_log "$SRC_HOST" "$COPY_CMD" \
            "Error copying $SRC_WWN to $DST_WWN in $SRC_HOST"
    fi
fi

# ------- Deactivate disk on SRC (skip for PROLOG_RESUME + PROLOG_UNDEPLOY and same host)-----------

if ! [[ "$LCM_STATE" =~ ^(9|31|49|50)$ ]] && [ "$SRC_HOST" != "$DST_HOST" ]; then
    log "Unmapping $SRC_WWN from $SRC_HOST"
    
    # src host in failed state, can not flush disk before unexport
    if [ $LCM_STATE -ne 60 ] && [ $LCM_STATE -ne 61 ]; then
        FLUSH_CMD=$(cat <<EOF
          set -e
          $(remove_lun "$SRC_WWN")
EOF
)
    
        ssh_exec_and_log "$SRC_HOST" "$FLUSH_CMD" \
            "Error flushing out mapping"
    fi
    
    ${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
        -n $SRC_NAME -hs $SRC_HOST
    
    if [ $? -ne 0 ]; then
      error_message "Error unexporting VV"
      exit 1
    fi

    ${DRIVER_PATH}/../../datastore/3par/3par.py deleteHost -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
        -hs $SRC_HOST >/dev/null
    
    if [ $? -eq 0 ]; then
        ssh_exec_and_log "$SRC_HOST" "$(iscsi_logout "$SRC_PORTALS")"
    fi

    # Delete disk from old system ds (only for non-persistent images)
    if [ "$CLONE" = "YES" ] || [ "$VOLATILE" = "YES" ]; then
        log "Remove disk from VM VV Set"
        VVSET=$(${DRIVER_PATH}/../../datastore/3par/3par.py deleteVolumeFromVVSet -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                            -nt $SRC_NAMING_TYPE -n $SRC_NAME -vi $VMID)
        
        if [ $? -ne 0 ]; then
          error_message "$VVSET"
          exit 1
        fi
    
        # Only for different system datastores
        if [ "$DST_DSID" != "$SRC_DSID" ] && [ "$SAME_3PAR" = 0 ]; then
            ${DRIVER_PATH}/../../datastore/3par/3par.py deleteVmClone -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                                        -nt $SRC_NAMING_TYPE -vi $VMID -id $DISK_ID
        fi
    fi
fi
