#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
# Copyright 2021, WEDOS Internet a.s. (wedos.com)                            #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to clone the image from the datastore (non-persistent images)
###############################################################################

# clone fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../datastore/libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
source ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get clone and datastore arguments from OpenNebula core ------------

SRC=$1
DST=$2

VMID=$3
SRC_DSID=$4

NAME=$(get_vv_name "$SRC")
WN=$(get_vv_wwn "$SRC")

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${DST_PATH} | cut -d. -f2)

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/NAME \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SIZE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/ORIGINAL_SIZE \
                    /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

VM_NAME="${XPATH_ELEMENTS[j++]//[^A-Za-z0-9\[\]() _~+-]/}"
IMAGE_ID="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"
ORIGINAL_SIZE="${XPATH_ELEMENTS[j++]}"
DST_DSID="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Get system ds information
#-------------------------------------------------------------------------------

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DST_DSID | $XPATH \
                    /DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DATASTORE/TEMPLATE/IP \
                    /DATASTORE/TEMPLATE/CPG \
                    /DATASTORE/TEMPLATE/THIN \
                    /DATASTORE/TEMPLATE/DEDUP \
                    /DATASTORE/TEMPLATE/COMPRESSION \
                    /DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DATASTORE/TEMPLATE/PORTALS \
                    /DATASTORE/TEMPLATE/PORTALS_NUM \
                    /DATASTORE/TEMPLATE/RCG_IP \
                    /DATASTORE/TEMPLATE/QOS_ENABLE \
                    /DATASTORE/TEMPLATE/QOS_PRIORITY \
                    /DATASTORE/TEMPLATE/QOS_MAX_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MIN_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MAX_BW \
                    /DATASTORE/TEMPLATE/QOS_MIN_BW \
                    /DATASTORE/TEMPLATE/QOS_LATENCY)

DST_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
DST_IP="${XPATH_ELEMENTS[j++]:-$IP}"
DST_CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
DST_THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
DST_DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
DST_COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
DST_NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
DST_PORTALS="${XPATH_ELEMENTS[j++]:-$PORTALS}"
DST_PORTALS_NUM="${XPATH_ELEMENTS[j++]:-$PORTALS_NUM}"
RCG_IP="${XPATH_ELEMENTS[j++]:-$RCG_IP}"
DST_QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"
DST_QOS_PRIORITY="${XPATH_ELEMENTS[j++]:-$QOS_PRIORITY}"
DST_QOS_MAX_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MAX_IOPS}"
DST_QOS_MIN_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MIN_IOPS}"
DST_QOS_MAX_BW="${XPATH_ELEMENTS[j++]:-$QOS_MAX_BW}"
DST_QOS_MIN_BW="${XPATH_ELEMENTS[j++]:-$QOS_MIN_BW}"
DST_QOS_LATENCY="${XPATH_ELEMENTS[j++]:-$QOS_LATENCY}"

if [ -z "$DST_PORTALS" ]; then
    DST_PORTALS=$(${DRIVER_PATH}/../../datastore/3par/3par.py getIscsiPortals -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD ${DST_PORTALS_NUM:+--sort YES})
    if [ $? -ne 0 ]; then
        error_message "$DST_PORTALS"
        exit 1
    fi
fi

#-------------------------------------------------------------------------------
# Start actions
#-------------------------------------------------------------------------------

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SRC_DSID | $XPATH \
                    /DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DATASTORE/TEMPLATE/IP \
                    /DATASTORE/TEMPLATE/CPG \
                    /DATASTORE/TEMPLATE/THIN \
                    /DATASTORE/TEMPLATE/DEDUP \
                    /DATASTORE/TEMPLATE/COMPRESSION \
                    /DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DATASTORE/TEMPLATE/PORTALS \
                    /DATASTORE/TEMPLATE/PORTALS_NUM \
                    /DATASTORE/TEMPLATE/QOS_ENABLE \
                    /DATASTORE/TEMPLATE/QOS_PRIORITY \
                    /DATASTORE/TEMPLATE/QOS_MAX_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MIN_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MAX_BW \
                    /DATASTORE/TEMPLATE/QOS_MIN_BW \
                    /DATASTORE/TEMPLATE/QOS_LATENCY)

SRC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
SRC_IP="${XPATH_ELEMENTS[j++]:-$IP}"
SRC_CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
SRC_THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
SRC_DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
SRC_COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
SRC_NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
SRC_PORTALS="${XPATH_ELEMENTS[j++]:-$PORTALS}"
SRC_PORTALS_NUM="${XPATH_ELEMENTS[j++]:-$PORTALS_NUM}"
SRC_QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"
SRC_QOS_PRIORITY="${XPATH_ELEMENTS[j++]:-$QOS_PRIORITY}"
SRC_QOS_MAX_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MAX_IOPS}"
SRC_QOS_MIN_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MIN_IOPS}"
SRC_QOS_MAX_BW="${XPATH_ELEMENTS[j++]:-$QOS_MAX_BW}"
SRC_QOS_MIN_BW="${XPATH_ELEMENTS[j++]:-$QOS_MIN_BW}"
SRC_QOS_LATENCY="${XPATH_ELEMENTS[j++]:-$QOS_LATENCY}"

${DRIVER_PATH}/../../datastore/3par/3par.py getVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD -n $NAME >/dev/null
if [ $? -ne 0 ]; then
    SAME_3PAR=0
else
    SAME_3PAR=1
fi

if [ "$SAME_3PAR" = 1 ]; then
    # -------- Clone image within single 3par ------------
    DST_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py createVmClone -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                    -p $PASSWORD -nt $DST_NAMING_TYPE -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION -sn $NAME \
                                    -vi $VMID -id $DISK_ID -c $DST_CPG -sz $SIZE -co "$VM_NAME")

    if [ $? -ne 0 ]; then
      error_message "$DST_NAME_WWN"
      exit 1
    fi

    DST_NAME=$(get_vv_name "$DST_NAME_WWN")
    DST_WWN=$(get_vv_wwn "$DST_NAME_WWN")
else
    # -------- Create image in case of multiple 3pars ------------
    DST_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py createVmVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                    -p $PASSWORD -nt $DST_NAMING_TYPE -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION \
                                    -vi $VMID -id $DISK_ID -c $DST_CPG -sz $SIZE -co "$VM_NAME")

    if [ $? -ne 0 ]; then
      error_message "$DST_NAME_WWN"
      exit 1
    fi

    DST_NAME=$(get_vv_name "$DST_NAME_WWN")
    DST_WWN=$(get_vv_wwn "$DST_NAME_WWN")
fi

log "Add disk to VM VV Set"
VVSET=$(${DRIVER_PATH}/../../datastore/3par/3par.py addVolumeToVVSet -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                    -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -co "$VM_NAME")

if [ $? -ne 0 ]; then
  error_message "$VVSET"
  exit 1
fi

if [ "$QOS_ENABLE" == "YES" ]; then
    log "Create QoS Policy"
    QOS=$(${DRIVER_PATH}/../../datastore/3par/3par.py createQosPolicy -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                        -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -qp $QOS_PRIORITY -qxi $DST_QOS_MAX_IOPS -qmi $DST_QOS_MIN_IOPS \
                        -qxb $DST_QOS_MAX_BW -qmb $DST_QOS_MIN_BW -ql $DST_QOS_LATENCY)

    if [ $? -ne 0 ]; then
      error_message "$QOS"
      exit 1
    fi
fi

DST_HOST_ISCSI_NAME=$($SSH $DST_HOST sudo cat /etc/iscsi/initiatorname.iscsi | awk -F= '{print $2}')
DST_HOST_3PAR=$(${DRIVER_PATH}/../../datastore/3par/3par.py setupHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
  -hs $DST_HOST -in $DST_HOST_ISCSI_NAME)

if [ $? -ne 0 ]; then
  error_message "$DST_HOST_3PAR"
  exit 1
fi

ssh_exec_and_log "$DST_HOST" "$(iscsi_login "$DST_PORTALS" "$DST_PORTALS_NUM")"

log "Mapping $DST_NAME_WWN to $DST_HOST"

LUN=$(${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                            -n $DST_NAME -hs $DST_HOST)

if [ $? -ne 0 ]; then
  error_message "$LUN"
  exit 1  
fi

DISCOVER_CMD=$(cat <<EOF
    set -e
    mkdir -p "$DST_DIR"
    $(discover_lun "$LUN" "$DST_WWN")
    ln -sf "\$DEV" "$DST_PATH"
EOF
)

ssh_make_path $DST_HOST $DST_DIR

ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
    "Error registering $DST_NAME_WWN to $DST_HOST"


if [ "$SAME_3PAR" = 1 ]; then
    exit 0
fi

# -------- Clone image between multiple 3pars ------------

# Get source image properties
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(oneimage show -x $IMAGE_ID | $XPATH \
                    /IMAGE/DATASTORE_ID \
                    /IMAGE/SOURCE)

SRC_DSID=${XPATH_ELEMENTS[j++]}
SRC_NAME_WWN=${XPATH_ELEMENTS[j++]}

SRC_NAME=$(get_vv_name "$SRC_NAME_WWN")
SRC_WWN=$(get_vv_wwn "$SRC_NAME_WWN")

# Get source datastore properties
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SRC_DSID | $XPATH \
             /DATASTORE/TEMPLATE/BRIDGE_LIST \
             /DATASTORE/TEMPLATE/API_ENDPOINT \
             /DATASTORE/TEMPLATE/IP \
             /DATASTORE/TEMPLATE/PORTALS \
             /DATASTORE/TEMPLATE/PORTALS_NUM \
             /DATASTORE/TEMPLATE/NAMING_TYPE)

BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
SRC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
SRC_IP="${XPATH_ELEMENTS[j++]:-$IP}"
SRC_PORTALS="${XPATH_ELEMENTS[j++]:-$PORTALS}"
SRC_PORTALS_NUM="${XPATH_ELEMENTS[j++]:-$PORTALS_NUM}"
SRC_NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"

SRC_HOST=`get_destination_host $IMAGE_ID`

if [ -z "$SRC_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

if [ -z $SRC_PORTALS ]; then
    SRC_PORTALS=$(${DRIVER_PATH}/../../datastore/3par/3par.py getIscsiPortals -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD ${SRC_PORTALS_NUM:+--sort YES})
    if [ $? -ne 0 ]; then
        error_message "$SRC_PORTALS"
        exit 1
    fi
fi

SRC_HOST_ISCSI_NAME=$($SSH $SRC_HOST sudo cat /etc/iscsi/initiatorname.iscsi | awk -F= '{print $2}')
SRC_HOST_3PAR=$(${DRIVER_PATH}/../../datastore/3par/3par.py setupHost -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
  -hs $SRC_HOST -in $SRC_HOST_ISCSI_NAME)

if [ $? -ne 0 ]; then
  error_message "$SRC_HOST_3PAR"
  exit 1
fi

ssh_exec_and_log "$SRC_HOST" "$(iscsi_login "$SRC_PORTALS" "$SRC_PORTALS_NUM")"

LOCK_FILE="/var/lock/one/3par-attach-${SRC_HOST}-${SRC_NAME}.lock"
( umask 0027; touch "${LOCK_FILE}" 2>/dev/null )

# open lockfile
{ exec {FD}>"${LOCK_FILE}"; } 2>/dev/null
if [ $? -ne 0 ]; then
    log_error "Could not create or open lock ${LOCK_FILE}"
    exit -2
fi

# acquire lock
flock -s "${FD}" 2>/dev/null
if [ $? -ne 0 ]; then
    log_error "Could not acquire shared lock on ${LOCK_FILE}"
    exit -2
fi

# Map image
log "Mapping $SRC_WWN to $SRC_HOST"

SRC_LUN=$(${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $SRC_NAME -hs $SRC_HOST)

if [ $? -ne 0 ]; then
  error_message "$SRC_LUN"
  exit 1
fi

DISCOVER_CMD=$(cat <<EOF
    set -e
    $(discover_lun "$SRC_LUN" "$SRC_WWN")
    echo "\$DEV"
EOF
)

ssh_exec_and_log "$SRC_HOST" "$DISCOVER_CMD" \
    "Error registering $SRC_WWN to $SRC_HOST"

# copy image
COPY_CMD=$(cat <<EOF
    set -e -o pipefail
    dd \if=/dev/disk/by-id/wwn-0x$SRC_WWN bs=${DD_BLOCK_SIZE:-64k} | $SSH $DST_HOST 'dd of=/dev/disk/by-id/wwn-0x$DST_WWN bs=${DD_BLOCK_SIZE:-64k} conv=${DD_CONV:-sparse}'
    sync
EOF
)

ssh_forward ssh_exec_and_log "$SRC_HOST" "$COPY_CMD" \
    "Error copying $SRC_WWN to $DST_WWN in $SRC_HOST"

if flock -n "${FD}" 2>/dev/null; then
    # Unmap image
    log "Unmapping $SRC_WWN from $SRC_HOST"

    FLUSH_CMD=$(cat <<EOF
        set -e
        $(remove_lun "$SRC_WWN")
EOF
)

    ssh_exec_and_log "$SRC_HOST" "$FLUSH_CMD" \
        "Error flushing out mapping"


    ${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $SRC_NAME -hs $SRC_HOST

    ${DRIVER_PATH}/../../datastore/3par/3par.py deleteHost -a $SRC_API_ENDPOINT -i $SRC_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                            -hs $SRC_HOST >/dev/null

    if [ $? -eq 0 ]; then
        ssh_exec_and_log "$SRC_HOST" "$(iscsi_logout "$SRC_PORTALS")"
    fi
fi

# release lock
eval "exec ${FD}>&-"
if flock -n "${FD}" 2>/dev/null; then
    rm -f "$LOCK_FILE"
fi

# ------------ Set up the replication ------------

if [ -z "$RCG_IP" ]; then
    exit 0
fi

start_ssh_connection "$DST_IP" "$USERNAME" "$PASSWORD"
start_ssh_connection "$RCG_IP" "$USERNAME" "$PASSWORD"

ssh_exec_and_log "$DST_IP" "creatercopygroup -usr_cpg ${DST_CPG} target:${DST_CPG} -snp_cpg ${DST_CPG} target:${DST_CPG}_snp $NAME ${RCG_IP}:sync" \
    "Error creating sync replication group"

ssh_exec_and_log "$DST_IP" "admitrcopyvv -createvv ${NAME} ${NAME} ${RCG_IP}:${NAME}" \
    "Error adding primary VV to RCG"

ssh_exec_and_log "$DST_IP" "startrcopygroup ${NAME}" \
    "Error starting replication group"

ssh_exec_and_log "$RCG_IP" "setvv -pol no_stale_ss ${NAME}" \
    "Error setting no_stale_ss policy for VV"

for i in 03 07 11 15 19 23; do
    ssh_exec_and_log "$RCG_IP" "createsv -ro ${NAME}-${i} ${NAME}" \
        "Error creating snapshot ${NAME}-${i}"
done

for i in 03 07 11 15 19 23; do
    ssh_exec_and_log "$RCG_IP" "createvvset -add VVS_SNP_${i}h ${NAME}-${i}" \
        "Error adding snapshot ${NAME}-${i} to corresponding VV sets"
done
